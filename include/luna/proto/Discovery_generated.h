// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DISCOVERY_LUNA_PROTO_H_
#define FLATBUFFERS_GENERATED_DISCOVERY_LUNA_PROTO_H_

#include "flatbuffers/flatbuffers.h"

namespace luna {
namespace proto {

struct UV;

struct ColorSpace;

struct Point;

struct Strand;

struct Discovery;

enum ColorChannels {
  ColorChannels_none = 0,
  ColorChannels_red = 1,
  ColorChannels_green = 2,
  ColorChannels_blue = 4,
  ColorChannels_white = 8,
  ColorChannels_MIN = ColorChannels_none,
  ColorChannels_MAX = ColorChannels_white
};

inline const ColorChannels (&EnumValuesColorChannels())[5] {
  static const ColorChannels values[] = {
    ColorChannels_none,
    ColorChannels_red,
    ColorChannels_green,
    ColorChannels_blue,
    ColorChannels_white
  };
  return values;
}

inline const char * const *EnumNamesColorChannels() {
  static const char * const names[] = {
    "none",
    "red",
    "green",
    "",
    "blue",
    "",
    "",
    "",
    "white",
    nullptr
  };
  return names;
}

inline const char *EnumNameColorChannels(ColorChannels e) {
  if (e < ColorChannels_none || e > ColorChannels_white) return "";
  const size_t index = static_cast<int>(e);
  return EnumNamesColorChannels()[index];
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) UV FLATBUFFERS_FINAL_CLASS {
 private:
  float u_;
  float v_;

 public:
  UV() {
    memset(this, 0, sizeof(UV));
  }
  UV(float _u, float _v)
      : u_(flatbuffers::EndianScalar(_u)),
        v_(flatbuffers::EndianScalar(_v)) {
  }
  float u() const {
    return flatbuffers::EndianScalar(u_);
  }
  float v() const {
    return flatbuffers::EndianScalar(v_);
  }
};
FLATBUFFERS_STRUCT_END(UV, 8);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) ColorSpace FLATBUFFERS_FINAL_CLASS {
 private:
  UV white_;
  UV red_;
  UV green_;
  UV blue_;

 public:
  ColorSpace() {
    memset(this, 0, sizeof(ColorSpace));
  }
  ColorSpace(const UV &_white, const UV &_red, const UV &_green, const UV &_blue)
      : white_(_white),
        red_(_red),
        green_(_green),
        blue_(_blue) {
  }
  const UV &white() const {
    return white_;
  }
  const UV &red() const {
    return red_;
  }
  const UV &green() const {
    return green_;
  }
  const UV &blue() const {
    return blue_;
  }
};
FLATBUFFERS_STRUCT_END(ColorSpace, 32);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Point FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  Point() {
    memset(this, 0, sizeof(Point));
  }
  Point(float _x, float _y, float _z)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        z_(flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(Point, 12);

struct Strand FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_PIXELCOUNT = 6,
    VT_CHANNELS = 8,
    VT_BEGIN = 10,
    VT_END = 12
  };
  int8_t id() const {
    return GetField<int8_t>(VT_ID, 0);
  }
  int16_t pixelCount() const {
    return GetField<int16_t>(VT_PIXELCOUNT, 0);
  }
  ColorChannels channels() const {
    return static_cast<ColorChannels>(GetField<int8_t>(VT_CHANNELS, 0));
  }
  const Point *begin() const {
    return GetStruct<const Point *>(VT_BEGIN);
  }
  const Point *end() const {
    return GetStruct<const Point *>(VT_END);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_ID) &&
           VerifyField<int16_t>(verifier, VT_PIXELCOUNT) &&
           VerifyField<int8_t>(verifier, VT_CHANNELS) &&
           VerifyField<Point>(verifier, VT_BEGIN) &&
           VerifyField<Point>(verifier, VT_END) &&
           verifier.EndTable();
  }
};

struct StrandBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(int8_t id) {
    fbb_.AddElement<int8_t>(Strand::VT_ID, id, 0);
  }
  void add_pixelCount(int16_t pixelCount) {
    fbb_.AddElement<int16_t>(Strand::VT_PIXELCOUNT, pixelCount, 0);
  }
  void add_channels(ColorChannels channels) {
    fbb_.AddElement<int8_t>(Strand::VT_CHANNELS, static_cast<int8_t>(channels), 0);
  }
  void add_begin(const Point *begin) {
    fbb_.AddStruct(Strand::VT_BEGIN, begin);
  }
  void add_end(const Point *end) {
    fbb_.AddStruct(Strand::VT_END, end);
  }
  explicit StrandBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  StrandBuilder &operator=(const StrandBuilder &);
  flatbuffers::Offset<Strand> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Strand>(end);
    return o;
  }
};

inline flatbuffers::Offset<Strand> CreateStrand(
    flatbuffers::FlatBufferBuilder &_fbb,
    int8_t id = 0,
    int16_t pixelCount = 0,
    ColorChannels channels = ColorChannels_none,
    const Point *begin = 0,
    const Point *end = 0) {
  StrandBuilder builder_(_fbb);
  builder_.add_end(end);
  builder_.add_begin(begin);
  builder_.add_pixelCount(pixelCount);
  builder_.add_channels(channels);
  builder_.add_id(id);
  return builder_.Finish();
}

struct Discovery FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_STRANDS = 6
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::Vector<flatbuffers::Offset<Strand>> *strands() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Strand>> *>(VT_STRANDS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_STRANDS) &&
           verifier.VerifyVector(strands()) &&
           verifier.VerifyVectorOfTables(strands()) &&
           verifier.EndTable();
  }
};

struct DiscoveryBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Discovery::VT_NAME, name);
  }
  void add_strands(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Strand>>> strands) {
    fbb_.AddOffset(Discovery::VT_STRANDS, strands);
  }
  explicit DiscoveryBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DiscoveryBuilder &operator=(const DiscoveryBuilder &);
  flatbuffers::Offset<Discovery> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Discovery>(end);
    return o;
  }
};

inline flatbuffers::Offset<Discovery> CreateDiscovery(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Strand>>> strands = 0) {
  DiscoveryBuilder builder_(_fbb);
  builder_.add_strands(strands);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<Discovery> CreateDiscoveryDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const std::vector<flatbuffers::Offset<Strand>> *strands = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto strands__ = strands ? _fbb.CreateVector<flatbuffers::Offset<Strand>>(*strands) : 0;
  return luna::proto::CreateDiscovery(
      _fbb,
      name__,
      strands__);
}

}  // namespace proto
}  // namespace luna

#endif  // FLATBUFFERS_GENERATED_DISCOVERY_LUNA_PROTO_H_
