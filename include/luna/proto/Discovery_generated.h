// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DISCOVERY_LUNA_PROTO_H_
#define FLATBUFFERS_GENERATED_DISCOVERY_LUNA_PROTO_H_

#include "flatbuffers/flatbuffers.h"

namespace luna {
namespace proto {

struct UV;

struct ColorSpace;

struct Point;

struct Strand;

struct Discovery;

enum ColorChannels {
  ColorChannels_none = 0,
  ColorChannels_red = 1,
  ColorChannels_green = 2,
  ColorChannels_blue = 4,
  ColorChannels_white = 8,
  ColorChannels_MIN = ColorChannels_none,
  ColorChannels_MAX = ColorChannels_white
};

inline const ColorChannels (&EnumValuesColorChannels())[5] {
  static const ColorChannels values[] = {
    ColorChannels_none,
    ColorChannels_red,
    ColorChannels_green,
    ColorChannels_blue,
    ColorChannels_white
  };
  return values;
}

inline const char * const *EnumNamesColorChannels() {
  static const char * const names[] = {
    "none",
    "red",
    "green",
    "",
    "blue",
    "",
    "",
    "",
    "white",
    nullptr
  };
  return names;
}

inline const char *EnumNameColorChannels(ColorChannels e) {
  if (e < ColorChannels_none || e > ColorChannels_white) return "";
  const size_t index = static_cast<int>(e);
  return EnumNamesColorChannels()[index];
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) UV FLATBUFFERS_FINAL_CLASS {
 private:
  float u_;
  float v_;

 public:
  UV() {
    memset(this, 0, sizeof(UV));
  }
  UV(float _u, float _v)
      : u_(flatbuffers::EndianScalar(_u)),
        v_(flatbuffers::EndianScalar(_v)) {
  }
  float u() const {
    return flatbuffers::EndianScalar(u_);
  }
  float v() const {
    return flatbuffers::EndianScalar(v_);
  }
};
FLATBUFFERS_STRUCT_END(UV, 8);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) ColorSpace FLATBUFFERS_FINAL_CLASS {
 private:
  UV white_;
  UV red_;
  UV green_;
  UV blue_;

 public:
  ColorSpace() {
    memset(this, 0, sizeof(ColorSpace));
  }
  ColorSpace(const UV &_white, const UV &_red, const UV &_green, const UV &_blue)
      : white_(_white),
        red_(_red),
        green_(_green),
        blue_(_blue) {
  }
  const UV &white() const {
    return white_;
  }
  const UV &red() const {
    return red_;
  }
  const UV &green() const {
    return green_;
  }
  const UV &blue() const {
    return blue_;
  }
};
FLATBUFFERS_STRUCT_END(ColorSpace, 32);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Point FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  Point() {
    memset(this, 0, sizeof(Point));
  }
  Point(float _x, float _y, float _z)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        z_(flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(Point, 12);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Strand FLATBUFFERS_FINAL_CLASS {
 private:
  int8_t id_;
  int8_t padding0__;
  int16_t pixelCount_;
  int8_t channels_;
  int8_t padding1__;  int16_t padding2__;
  Point begin_;
  Point end_;

 public:
  Strand() {
    memset(this, 0, sizeof(Strand));
  }
  Strand(int8_t _id, int16_t _pixelCount, ColorChannels _channels, const Point &_begin, const Point &_end)
      : id_(flatbuffers::EndianScalar(_id)),
        padding0__(0),
        pixelCount_(flatbuffers::EndianScalar(_pixelCount)),
        channels_(flatbuffers::EndianScalar(static_cast<int8_t>(_channels))),
        padding1__(0),
        padding2__(0),
        begin_(_begin),
        end_(_end) {
    (void)padding0__;
    (void)padding1__;    (void)padding2__;
  }
  int8_t id() const {
    return flatbuffers::EndianScalar(id_);
  }
  int16_t pixelCount() const {
    return flatbuffers::EndianScalar(pixelCount_);
  }
  ColorChannels channels() const {
    return static_cast<ColorChannels>(flatbuffers::EndianScalar(channels_));
  }
  const Point &begin() const {
    return begin_;
  }
  const Point &end() const {
    return end_;
  }
};
FLATBUFFERS_STRUCT_END(Strand, 32);

struct Discovery FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PORT = 4,
    VT_NAME = 6,
    VT_STRANDS = 8
  };
  uint16_t port() const {
    return GetField<uint16_t>(VT_PORT, 0);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::Vector<const Strand *> *strands() const {
    return GetPointer<const flatbuffers::Vector<const Strand *> *>(VT_STRANDS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_PORT) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_STRANDS) &&
           verifier.VerifyVector(strands()) &&
           verifier.EndTable();
  }
};

struct DiscoveryBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_port(uint16_t port) {
    fbb_.AddElement<uint16_t>(Discovery::VT_PORT, port, 0);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Discovery::VT_NAME, name);
  }
  void add_strands(flatbuffers::Offset<flatbuffers::Vector<const Strand *>> strands) {
    fbb_.AddOffset(Discovery::VT_STRANDS, strands);
  }
  explicit DiscoveryBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DiscoveryBuilder &operator=(const DiscoveryBuilder &);
  flatbuffers::Offset<Discovery> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Discovery>(end);
    return o;
  }
};

inline flatbuffers::Offset<Discovery> CreateDiscovery(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t port = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::Vector<const Strand *>> strands = 0) {
  DiscoveryBuilder builder_(_fbb);
  builder_.add_strands(strands);
  builder_.add_name(name);
  builder_.add_port(port);
  return builder_.Finish();
}

inline flatbuffers::Offset<Discovery> CreateDiscoveryDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t port = 0,
    const char *name = nullptr,
    const std::vector<Strand> *strands = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto strands__ = strands ? _fbb.CreateVectorOfStructs<Strand>(*strands) : 0;
  return luna::proto::CreateDiscovery(
      _fbb,
      port,
      name__,
      strands__);
}

}  // namespace proto
}  // namespace luna

#endif  // FLATBUFFERS_GENERATED_DISCOVERY_LUNA_PROTO_H_
