// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SETCOLOR_LUNA_PROTO_H_
#define FLATBUFFERS_GENERATED_SETCOLOR_LUNA_PROTO_H_

#include "flatbuffers/flatbuffers.h"

namespace luna {
namespace proto {

struct RGB;

struct RGBData;

struct StrandData;

struct SetColor;

enum RawData {
  RawData_NONE = 0,
  RawData_RGBData = 1,
  RawData_MIN = RawData_NONE,
  RawData_MAX = RawData_RGBData
};

inline const RawData (&EnumValuesRawData())[2] {
  static const RawData values[] = {
    RawData_NONE,
    RawData_RGBData
  };
  return values;
}

inline const char * const *EnumNamesRawData() {
  static const char * const names[] = {
    "NONE",
    "RGBData",
    nullptr
  };
  return names;
}

inline const char *EnumNameRawData(RawData e) {
  if (e < RawData_NONE || e > RawData_RGBData) return "";
  const size_t index = static_cast<int>(e);
  return EnumNamesRawData()[index];
}

template<typename T> struct RawDataTraits {
  static const RawData enum_value = RawData_NONE;
};

template<> struct RawDataTraits<RGBData> {
  static const RawData enum_value = RawData_RGBData;
};

bool VerifyRawData(flatbuffers::Verifier &verifier, const void *obj, RawData type);
bool VerifyRawDataVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(1) RGB FLATBUFFERS_FINAL_CLASS {
 private:
  uint8_t r_;
  uint8_t g_;
  uint8_t b_;

 public:
  RGB() {
    memset(this, 0, sizeof(RGB));
  }
  RGB(uint8_t _r, uint8_t _g, uint8_t _b)
      : r_(flatbuffers::EndianScalar(_r)),
        g_(flatbuffers::EndianScalar(_g)),
        b_(flatbuffers::EndianScalar(_b)) {
  }
  uint8_t r() const {
    return flatbuffers::EndianScalar(r_);
  }
  uint8_t g() const {
    return flatbuffers::EndianScalar(g_);
  }
  uint8_t b() const {
    return flatbuffers::EndianScalar(b_);
  }
};
FLATBUFFERS_STRUCT_END(RGB, 3);

struct RGBData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA = 4
  };
  const flatbuffers::Vector<const RGB *> *data() const {
    return GetPointer<const flatbuffers::Vector<const RGB *> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct RGBDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data(flatbuffers::Offset<flatbuffers::Vector<const RGB *>> data) {
    fbb_.AddOffset(RGBData::VT_DATA, data);
  }
  explicit RGBDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RGBDataBuilder &operator=(const RGBDataBuilder &);
  flatbuffers::Offset<RGBData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RGBData>(end);
    return o;
  }
};

inline flatbuffers::Offset<RGBData> CreateRGBData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<const RGB *>> data = 0) {
  RGBDataBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

inline flatbuffers::Offset<RGBData> CreateRGBDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<RGB> *data = nullptr) {
  auto data__ = data ? _fbb.CreateVectorOfStructs<RGB>(*data) : 0;
  return luna::proto::CreateRGBData(
      _fbb,
      data__);
}

struct StrandData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_DATA_TYPE = 6,
    VT_DATA = 8
  };
  int8_t id() const {
    return GetField<int8_t>(VT_ID, 0);
  }
  RawData data_type() const {
    return static_cast<RawData>(GetField<uint8_t>(VT_DATA_TYPE, 0));
  }
  const void *data() const {
    return GetPointer<const void *>(VT_DATA);
  }
  template<typename T> const T *data_as() const;
  const RGBData *data_as_RGBData() const {
    return data_type() == RawData_RGBData ? static_cast<const RGBData *>(data()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_ID) &&
           VerifyField<uint8_t>(verifier, VT_DATA_TYPE) &&
           VerifyOffset(verifier, VT_DATA) &&
           VerifyRawData(verifier, data(), data_type()) &&
           verifier.EndTable();
  }
};

template<> inline const RGBData *StrandData::data_as<RGBData>() const {
  return data_as_RGBData();
}

struct StrandDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(int8_t id) {
    fbb_.AddElement<int8_t>(StrandData::VT_ID, id, 0);
  }
  void add_data_type(RawData data_type) {
    fbb_.AddElement<uint8_t>(StrandData::VT_DATA_TYPE, static_cast<uint8_t>(data_type), 0);
  }
  void add_data(flatbuffers::Offset<void> data) {
    fbb_.AddOffset(StrandData::VT_DATA, data);
  }
  explicit StrandDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  StrandDataBuilder &operator=(const StrandDataBuilder &);
  flatbuffers::Offset<StrandData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<StrandData>(end);
    return o;
  }
};

inline flatbuffers::Offset<StrandData> CreateStrandData(
    flatbuffers::FlatBufferBuilder &_fbb,
    int8_t id = 0,
    RawData data_type = RawData_NONE,
    flatbuffers::Offset<void> data = 0) {
  StrandDataBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_data_type(data_type);
  builder_.add_id(id);
  return builder_.Finish();
}

struct SetColor FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STRANDS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<StrandData>> *strands() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<StrandData>> *>(VT_STRANDS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_STRANDS) &&
           verifier.VerifyVector(strands()) &&
           verifier.VerifyVectorOfTables(strands()) &&
           verifier.EndTable();
  }
};

struct SetColorBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_strands(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<StrandData>>> strands) {
    fbb_.AddOffset(SetColor::VT_STRANDS, strands);
  }
  explicit SetColorBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SetColorBuilder &operator=(const SetColorBuilder &);
  flatbuffers::Offset<SetColor> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SetColor>(end);
    return o;
  }
};

inline flatbuffers::Offset<SetColor> CreateSetColor(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<StrandData>>> strands = 0) {
  SetColorBuilder builder_(_fbb);
  builder_.add_strands(strands);
  return builder_.Finish();
}

inline flatbuffers::Offset<SetColor> CreateSetColorDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<StrandData>> *strands = nullptr) {
  auto strands__ = strands ? _fbb.CreateVector<flatbuffers::Offset<StrandData>>(*strands) : 0;
  return luna::proto::CreateSetColor(
      _fbb,
      strands__);
}

inline bool VerifyRawData(flatbuffers::Verifier &verifier, const void *obj, RawData type) {
  switch (type) {
    case RawData_NONE: {
      return true;
    }
    case RawData_RGBData: {
      auto ptr = reinterpret_cast<const RGBData *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline bool VerifyRawDataVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyRawData(
        verifier,  values->Get(i), types->GetEnum<RawData>(i))) {
      return false;
    }
  }
  return true;
}

}  // namespace proto
}  // namespace luna

#endif  // FLATBUFFERS_GENERATED_SETCOLOR_LUNA_PROTO_H_
